# Generated by Django 4.1.6 on 2023-02-27 09:43

import django.contrib.postgres.fields
import django.contrib.postgres.fields.ranges
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BaseComponent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=120, verbose_name='Название')),
            ],
        ),
        migrations.CreateModel(
            name='Processor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('manufacturer', models.CharField(choices=[('Intel', 'Intel'), ('AMD', 'AMD')], db_index=True, max_length=10, verbose_name='Производитель')),
                ('package', models.CharField(choices=[('OEM', 'OEM'), ('BOX', 'BOX')], max_length=3, verbose_name='Упаковка')),
                ('generation', models.CharField(choices=[('Celeron', 'Celeron'), ('Pentium', 'Pentium'), ('i3', 'i3'), ('i5', 'i5'), ('i7', 'i7'), ('i9', 'i9'), ('Xeon', 'Xeon'), ('Athlon', 'Athlon'), ('FX', 'FX'), ('Ryzen 3', 'Ryzen 3'), ('Ryzen 5', 'Ryzen 5'), ('Ryzen 7', 'Ryzen 7'), ('Ryzen 9', 'Ryzen 9'), ('Threadripper', 'Threadripper')], db_index=True, max_length=20, verbose_name='Поколение')),
                ('series', models.CharField(max_length=40, verbose_name='Серия')),
                ('socket', models.CharField(choices=[('LGA1155', 'LGA1155'), ('LGA2011', 'LGA2011'), ('LGA2011-v3', 'LGA2011-v3'), ('LGA1356', 'LGA1356'), ('LGA1150', 'LGA1150'), ('LGA1151', 'LGA1151'), ('LGA2066', 'LGA2066'), ('LGA1200', 'LGA1200'), ('LGA1700', 'LGA1700'), ('AM3', 'AM3'), ('AM3+', 'AM3+'), ('FM1', 'FM1'), ('FM2', 'FM2'), ('FM2+', 'FM2+'), ('AM1', 'AM1'), ('AM4', 'AM4'), ('TR4', 'TR4'), ('sTRX4', 'sTRX4'), ('sWRX8', 'sWRX8'), ('AM5', 'AM5')], max_length=10, verbose_name='Сокет')),
                ('frequency', django.contrib.postgres.fields.ranges.DecimalRangeField(default_bounds='[]', verbose_name='Частота(минимальная и максимальная)')),
                ('kernels', models.PositiveIntegerField(verbose_name='Кол-во ядер')),
                ('streams', models.PositiveIntegerField(verbose_name='Кол-во потоков')),
                ('cache_l2', models.PositiveIntegerField(verbose_name='Кэш L2')),
                ('cache_l3', models.PositiveIntegerField(verbose_name='Кэш L3')),
                ('tech_process', models.PositiveIntegerField(verbose_name='Техпроцесс')),
                ('type_ram', models.CharField(choices=[('DDR1', 'DDR1'), ('DDR2', 'DDR2'), ('DDR3', 'DDR3'), ('DDR4', 'DDR4')], max_length=6, verbose_name='Поддерживаемая ОЗУ')),
                ('max_ram_size', models.PositiveIntegerField(verbose_name='Максимальное кол-во ОЗУ')),
                ('max_ram_frequency', models.PositiveIntegerField(verbose_name='Максимальная частота ОЗУ')),
                ('ram_canals', models.PositiveIntegerField(verbose_name='Кол-во каналов ОЗУ')),
                ('TDP', models.PositiveIntegerField(verbose_name='TDP')),
            ],
            options={
                'verbose_name': 'Процессор',
                'verbose_name_plural': 'Процессоры',
                'ordering': ['-generation'],
            },
        ),
        migrations.CreateModel(
            name='CoolerForProcessor',
            fields=[
                ('basecomponent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='components.basecomponent')),
                ('type', models.CharField(choices=[('Горизонтальный', 'Горизонтальный'), ('Башенный', 'Башенный'), ('Горизонтально-башенный', 'Горизонтально-башенный')], max_length=25, verbose_name='Тип')),
                ('sockets', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('LGA1155', 'LGA1155'), ('LGA2011', 'LGA2011'), ('LGA2011-v3', 'LGA2011-v3'), ('LGA1356', 'LGA1356'), ('LGA1150', 'LGA1150'), ('LGA1151', 'LGA1151'), ('LGA2066', 'LGA2066'), ('LGA1200', 'LGA1200'), ('LGA1700', 'LGA1700'), ('AM3', 'AM3'), ('AM3+', 'AM3+'), ('FM1', 'FM1'), ('FM2', 'FM2'), ('FM2+', 'FM2+'), ('AM1', 'AM1'), ('AM4', 'AM4'), ('TR4', 'TR4'), ('sTRX4', 'sTRX4'), ('sWRX8', 'sWRX8'), ('AM5', 'AM5')], max_length=10), size=None, verbose_name='Сокет(ы)')),
                ('material', models.CharField(max_length=40, verbose_name='Материал радиатора')),
                ('MPD', models.PositiveIntegerField(verbose_name='Максимальная рассеиваемая мощность')),
                ('count_fans', models.PositiveIntegerField(verbose_name='Кол-во вентиляторов')),
                ('rotational_speed', django.contrib.postgres.fields.ranges.DecimalRangeField(default_bounds='[]', verbose_name='Скорость вращения')),
                ('noise', django.contrib.postgres.fields.ranges.DecimalRangeField(default_bounds='[]', verbose_name='Уровень шума')),
            ],
            options={
                'verbose_name': 'Кулер(процессор)',
                'verbose_name_plural': 'Кулеры(процессор)',
                'ordering': ['-MPD'],
            },
            bases=('components.basecomponent',),
        ),
        migrations.CreateModel(
            name='MotherBoard',
            fields=[
                ('basecomponent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='components.basecomponent')),
                ('form_factor', models.CharField(choices=[('AT', 'AT'), ('Baby-AT', 'Baby-AT'), ('ATX', 'ATX'), ('Mini-ATX', 'Mini-ATX'), ('microATX', 'microATX'), ('LPX ', 'LPX '), ('NLX', 'NLX'), ('microNLX', 'microNLX')], max_length=10, verbose_name='Форм-фактор')),
                ('socket', models.CharField(choices=[('LGA1155', 'LGA1155'), ('LGA2011', 'LGA2011'), ('LGA2011-v3', 'LGA2011-v3'), ('LGA1356', 'LGA1356'), ('LGA1150', 'LGA1150'), ('LGA1151', 'LGA1151'), ('LGA2066', 'LGA2066'), ('LGA1200', 'LGA1200'), ('LGA1700', 'LGA1700'), ('AM3', 'AM3'), ('AM3+', 'AM3+'), ('FM1', 'FM1'), ('FM2', 'FM2'), ('FM2+', 'FM2+'), ('AM1', 'AM1'), ('AM4', 'AM4'), ('TR4', 'TR4'), ('sTRX4', 'sTRX4'), ('sWRX8', 'sWRX8'), ('AM5', 'AM5')], max_length=10, verbose_name='Сокет')),
                ('chipset', models.CharField(max_length=5, verbose_name='Чипсет')),
            ],
            options={
                'verbose_name': 'Материнская плата',
                'verbose_name_plural': 'Материнские платы',
                'ordering': ['-name'],
            },
            bases=('components.basecomponent',),
        ),
        migrations.CreateModel(
            name='PowerUnit',
            fields=[
                ('basecomponent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='components.basecomponent')),
                ('power', models.PositiveIntegerField(verbose_name='Мощность')),
                ('standard', models.CharField(max_length=20, verbose_name='Стандарт')),
                ('PFC', models.BooleanField(verbose_name='Коррекция коэффициента мощности ')),
                ('certificate_80_plus', models.CharField(max_length=10, verbose_name='Сертификация 80 plus')),
                ('mb_conn', models.CharField(max_length=10, verbose_name='Разъём питания материнской платы')),
                ('pin4_cpu', models.PositiveIntegerField(blank=True, verbose_name='Количество разъемов 4-pin CPU')),
                ('pin4_4_cpu', models.PositiveIntegerField(blank=True, verbose_name='Кол-во разъемов 4+4 pin CPU')),
                ('pin6_2_pci', models.PositiveIntegerField(blank=True, verbose_name='Количество разъемов 6+2-pin PCI-E')),
                ('pin15_sata', models.PositiveIntegerField(blank=True, verbose_name='Количество разъемов 15-pin SATA')),
                ('fan_diameter', models.PositiveIntegerField(verbose_name='Диаметр вентилятора')),
            ],
            options={
                'verbose_name': 'Блоки питания',
                'ordering': ['-power'],
            },
            bases=('components.basecomponent',),
        ),
        migrations.CreateModel(
            name='RAM',
            fields=[
                ('basecomponent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='components.basecomponent')),
                ('type', models.CharField(choices=[('SIMM', 'SIMM'), ('DIMM', 'DIMM'), ('DDR', 'DDR'), ('DDR2', 'DDR2'), ('DDR3', 'DDR3'), ('DDR4', 'DDR4'), ('DDR5', 'DDR5')], max_length=5, verbose_name='Тип памяти')),
                ('form_factor', models.CharField(choices=[('DIMM', 'DIMM'), ('SO-DIMM', 'SO-DIMM'), ('RDIMM', 'RDIMM')], max_length=10, verbose_name='Форм-фактор')),
                ('capacity', models.PositiveIntegerField(db_index=True, verbose_name='Объём')),
                ('frequency', models.PositiveIntegerField(db_index=True, verbose_name='Тактовая частота')),
                ('CL', models.PositiveIntegerField(blank=True, null=True, verbose_name='CAS Latency (CL)')),
                ('tRCD', models.PositiveIntegerField(blank=True, null=True, verbose_name='RAS to CAS Delay (tRCD)')),
                ('tRP', models.PositiveIntegerField(blank=True, null=True, verbose_name='Row Precharge Delay (tRP)')),
                ('tRAS', models.PositiveIntegerField(blank=True, null=True, verbose_name='Activate to Precharge Delay (tRAS)')),
            ],
            options={
                'verbose_name': 'ОЗУ',
                'verbose_name_plural': 'ОЗУ',
                'ordering': ['-capacity'],
            },
            bases=('components.basecomponent',),
        ),
        migrations.CreateModel(
            name='ROM',
            fields=[
                ('basecomponent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='components.basecomponent')),
                ('interface', models.CharField(choices=[('SATA II', 'SATA II'), ('SATA III', 'SATA III')], max_length=10, verbose_name='Интерфейс')),
                ('form_factor', models.CharField(choices=[('2.5', '2.5'), ('3.5', '3.5')], max_length=10, verbose_name='Форм-фактор')),
                ('capacity', models.PositiveIntegerField(verbose_name='Ёмкость')),
                ('write_read_speed', models.PositiveIntegerField(verbose_name='Скорость чтения/записи')),
                ('buffer_capacity', models.PositiveIntegerField(verbose_name='Объём буффера')),
                ('noise_level', models.PositiveIntegerField(verbose_name='Уровень шума')),
                ('spindle_speed', models.PositiveIntegerField(verbose_name='Скорость вращения шпинделя')),
            ],
            options={
                'verbose_name': 'ПЗУ',
                'verbose_name_plural': 'ПЗУ',
            },
            bases=('components.basecomponent',),
        ),
        migrations.CreateModel(
            name='SSD',
            fields=[
                ('basecomponent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='components.basecomponent')),
                ('capacity', models.PositiveIntegerField(verbose_name='Ёмкость')),
                ('interface', models.CharField(choices=[('SATA 3', 'SATA 3'), ('SATA 2', 'SATA 2'), ('PCI-E 3.x x2', 'PCI-E 3.x x2'), ('PCI-E 3.x x4', 'PCI-E 3.x x4'), ('PCI-E 4.0 x4', 'PCI-E 4.0 x4'), ('mSATA', 'mSATA'), ('M.2', 'M.2'), ('SAS', 'SAS'), ('U.2', 'U.2')], max_length=12, verbose_name='Интерфейс')),
                ('read', models.PositiveIntegerField(verbose_name='Скорость чтения')),
                ('write', models.PositiveIntegerField(verbose_name='Скорость записи')),
                ('bits_per_cell', models.CharField(choices=[('MLC', 'MLC'), ('TLC', 'TLC'), ('QLC', 'QLC')], max_length=5, verbose_name='Бит на ячейку')),
                ('structure', models.CharField(choices=[('2D NAND', '2D NAND'), ('3D NAND', '3D NAND'), ('3D XPoint', '3D XPoint')], max_length=15, verbose_name='Структура памяти')),
                ('NVMe', models.BooleanField(verbose_name='Поддержка NVMe')),
                ('DRAM_buffer', models.BooleanField(verbose_name='DRAM буфер')),
                ('m2_key', models.CharField(blank=True, choices=[('M', 'M'), ('B', 'B'), ('B&M', 'B&M')], max_length=3, null=True, verbose_name='Тип ключа(M2)')),
                ('TBW', models.PositiveIntegerField(verbose_name='Максимальный ресурс записи')),
            ],
            options={
                'verbose_name': 'SSD',
                'verbose_name_plural': 'SSD',
                'ordering': ['-capacity'],
            },
            bases=('components.basecomponent',),
        ),
        migrations.CreateModel(
            name='Videocard',
            fields=[
                ('basecomponent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='components.basecomponent')),
                ('manufacturer', models.CharField(choices=[('NVIDIA', 'NVIDIA'), ('ATI', 'ATI')], max_length=10, verbose_name='Производитель')),
                ('GPU', models.CharField(db_index=True, max_length=50, verbose_name='Графический процессор')),
                ('frequency_video_chip', models.PositiveIntegerField(verbose_name='Частота видео чипа')),
                ('microarchitecture', models.CharField(max_length=50, verbose_name='Микроархитектура')),
                ('tech_process', models.PositiveIntegerField(verbose_name='Техпроцесс')),
                ('memory', models.PositiveIntegerField(db_index=True, verbose_name='Объём памяти')),
                ('memory_bus_width', models.PositiveIntegerField(verbose_name='Ширина шины памяти')),
                ('memory_bandwidth', models.PositiveIntegerField(verbose_name='Пропускная способность шины')),
                ('type_memory', models.CharField(choices=[('GDDR2', 'GDDR2'), ('GDDR3', 'GDDR3'), ('GDDR4', 'GDDR4'), ('GDDR5', 'GDDR5')], max_length=5, verbose_name='Тип памяти')),
                ('TMU', models.PositiveIntegerField(verbose_name='Кол-во текстурных блоков')),
                ('ROP', models.PositiveIntegerField(verbose_name='Кол-во блоков растеризации')),
                ('form_factor', models.CharField(default='PCI-E x16', max_length=20, verbose_name='Форм-фактор разъема подключения')),
                ('video_connectors', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=20), size=None, verbose_name='Видеоразъемы')),
                ('ray_tracing', models.BooleanField(default=False, verbose_name='Поддержка трассировки лучей')),
            ],
            options={
                'verbose_name': 'Видеокарта',
                'verbose_name_plural': 'Видеокарты',
                'ordering': ['-memory'],
            },
            bases=('components.basecomponent',),
        ),
    ]
